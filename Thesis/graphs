<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Emotion Analysis Visualization</title>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
        }

        .bar {
            fill: steelblue;
        }

        .bar:hover {
            fill: orange;
        }

        .axis-label {
            font-size: 12px;
            text-anchor: middle;
        }

        .axis path, .axis line {
            fill: none;
            shape-rendering: crispEdges;
        }
    </style>
</head>
<body>
    <h1>Emotion Analysis Visualization</h1>
    <div id="chart"></div>

    <script>
        // Load the CSV file using D3.js
        d3.csv("emotion_analysis.csv").then(function(data) {
            // Process the data
            const emotions = data.columns.slice(1); // Skip the first column (sentence)
            
            // Setup the dimensions for the chart
            const margin = { top: 20, right: 30, bottom: 40, left: 40 },
                  width = 900 - margin.left - margin.right,
                  height = 500 - margin.top - margin.bottom;

            // Create the SVG element
            const svg = d3.select("#chart")
                          .append("svg")
                          .attr("width", width + margin.left + margin.right)
                          .attr("height", height + margin.top + margin.bottom)
                          .append("g")
                          .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

            // Prepare the data for stacked bar chart (emotion by sentence)
            const stackedData = emotions.map(emotion => {
                return {
                    emotion: emotion,
                    values: data.map(d => ({ sentence: d.Sentence, score: +d[emotion] }))
                };
            });

            // Set up scales
            const x = d3.scaleBand()
                        .domain(data.map(d => d.Sentence))
                        .range([0, width])
                        .padding(0.1);

            const y = d3.scaleLinear()
                        .domain([0, 1])  // Emotion scores range from 0 to 1
                        .nice()
                        .range([height, 0]);

            // Create the X axis
            svg.append("g")
               .selectAll(".x-axis")
               .data(data)
               .enter().append("text")
               .attr("class", "axis-label")
               .attr("x", (d, i) => x(d.Sentence) + x.bandwidth() / 2)
               .attr("y", height + 20)
               .text(d => d.Sentence)
               .style("text-anchor", "middle");

            // Create the Y axis
            svg.append("g")
               .attr("class", "axis")
               .call(d3.axisLeft(y));

            // Add the bars for stacked chart
            let stack = d3.stack().keys(emotions);

            svg.selectAll(".bar-group")
               .data(stack(stackedData))
               .enter().append("g")
               .attr("class", "bar-group")
               .attr("fill", (d, i) => d3.schemeCategory10[i])  // Use a color scale
               .selectAll(".bar")
               .data(d => d.values)
               .enter().append("rect")
               .attr("class", "bar")
               .attr("x", (d, i) => x(d.sentence))
               .attr("y", d => y(d.score))
               .attr("width", x.bandwidth())
               .attr("height", d => height - y(d.score));
        });
    </script>
</body>
</html>
