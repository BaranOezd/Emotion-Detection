{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\seyit\\\\Desktop\\\\Emotion Analysis\\\\frontend2\\\\src\\\\components\\\\EmotionAnalysisVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst emotionColors = {\n  \"Joy\": \"#FFEB3B\",\n  \"Sadness\": \"#2196F3\",\n  \"Fear\": \"#9C27B0\",\n  \"Disgust\": \"#4CAF50\",\n  \"Anger\": \"#F44336\",\n  \"Surprise\": \"#FFB322\",\n  \"Neutral\": \"#9E9E9E\"\n};\nconst EmotionAnalysisVisualization = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [selectedSentence, setSelectedSentence] = useState(null);\n  const [inputText, setInputText] = useState(\"\");\n  const [selectedEmotions, setSelectedEmotions] = useState(new Set(Object.keys(emotionColors)));\n  const chartRef = useRef(null);\n  const steamGraphRef = useRef(null);\n  const fileInputRef = useRef(null);\n  useEffect(() => {\n    d3.csv(\"/backend/emotion_analysis.csv\").then(setData);\n  }, []);\n  const emotions = data.length > 0 ? Object.keys(data[0]).filter(key => key !== \"Sentence\") : [];\n  useEffect(() => {\n    if (selectedSentence) drawBarChart();\n  }, [selectedSentence]);\n  useEffect(() => {\n    if (data.length > 0) drawSteamGraph();\n  }, [data, selectedEmotions]);\n  const drawBarChart = () => {\n    const chartDiv = d3.select(chartRef.current);\n    chartDiv.html(\"\");\n    const margin = {\n      top: 10,\n      right: 30,\n      bottom: 50,\n      left: 50\n    };\n    const width = chartDiv.node().clientWidth - margin.left - margin.right;\n    const height = chartDiv.node().clientHeight - margin.top - margin.bottom;\n    const svg = chartDiv.append(\"svg\").attr(\"viewBox\", `0 0 ${width + margin.left + margin.right} ${height + margin.top + margin.bottom}`).attr(\"preserveAspectRatio\", \"xMidYMid meet\").style(\"width\", \"100%\").style(\"height\", \"100%\").append(\"g\").attr(\"transform\", `translate(${margin.left},${margin.top})`);\n    const x = d3.scaleBand().domain(emotions).range([0, width]).padding(0.2);\n    const y = d3.scaleLinear().domain([0, 1]).nice().range([height, 0]);\n    svg.append(\"g\").attr(\"transform\", `translate(0,${height})`).call(d3.axisBottom(x));\n    svg.append(\"g\").call(d3.axisLeft(y).ticks(5).tickFormat(d => `${d * 100}%`));\n    const emotionScores = emotions.map(emotion => ({\n      emotion,\n      score: +selectedSentence[emotion] || 0\n    }));\n    svg.selectAll(\".bar\").data(emotionScores).enter().append(\"rect\").attr(\"x\", d => x(d.emotion)).attr(\"y\", d => y(d.score)).attr(\"width\", x.bandwidth()).attr(\"height\", d => height - y(d.score)).style(\"fill\", d => emotionColors[d.emotion]);\n    svg.selectAll(\".label\").data(emotionScores).enter().append(\"text\").attr(\"x\", d => x(d.emotion) + x.bandwidth() / 2).attr(\"y\", d => y(d.score) - 5).attr(\"text-anchor\", \"middle\").style(\"font-size\", \"12px\").text(d => d.score > 0 ? `${Math.round(d.score * 100)}%` : \"\");\n  };\n  const handleAnalyze = () => {\n    // Send a POST request to the backend with the input text\n    fetch(\"/analyze\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        text: inputText\n      }) // Send the input text as JSON\n    }).then(res => {\n      if (!res.ok) {\n        throw new Error(\"Network response was not ok\");\n      }\n      return res.json();\n    }).then(data => {\n      // Update the state with the analysis results\n      setData(data.results);\n    }).catch(error => {\n      console.error(\"Error analyzing text:\", error);\n      alert(\"Failed to analyze text. Please try again.\");\n    });\n  };\n  const handleFileUpload = e => {\n    const file = e.target.files[0]; // Get the uploaded file\n    if (!file) return; // Exit if no file is selected\n\n    const formData = new FormData(); // Create a FormData object\n    formData.append(\"file\", file); // Append the file to the FormData object\n\n    // Send a POST request to the backend with the file\n    fetch(\"/upload\", {\n      method: \"POST\",\n      body: formData // Send the file as FormData\n    }).then(res => {\n      if (!res.ok) {\n        throw new Error(\"Network response was not ok\");\n      }\n      return res.json();\n    }).then(data => {\n      // Update the state with the analysis results\n      setData(data.results);\n    }).catch(error => {\n      console.error(\"Error uploading file:\", error);\n      alert(\"Failed to upload file. Please try again.\");\n    });\n  };\n\n  // ✅ Draw Steam Graph (Filtered by Selected Emotions)\n  const drawSteamGraph = () => {\n    const container = d3.select(steamGraphRef.current);\n    container.html(\"\");\n    const margin = {\n      top: 20,\n      right: 30,\n      bottom: 100,\n      left: 50\n    };\n    const width = container.node().clientWidth - margin.left - margin.right;\n    const height = container.node().clientHeight - margin.top - margin.bottom;\n    const svg = container.append(\"svg\").attr(\"viewBox\", `0 0 ${width + margin.left + margin.right} ${height + margin.top + margin.bottom}`).attr(\"preserveAspectRatio\", \"xMidYMid meet\").style(\"width\", \"100%\").style(\"height\", \"100%\").append(\"g\").attr(\"transform\", `translate(${margin.left},${margin.top})`);\n    const x = d3.scaleLinear().domain([1, data.length]).range([0, width]);\n    const y = d3.scaleLinear().domain([0, 1]).nice().range([height, 0]);\n    svg.append(\"g\").attr(\"transform\", `translate(0,${height})`).call(d3.axisBottom(x));\n    svg.append(\"g\").call(d3.axisLeft(y).ticks(5).tickFormat(d3.format(\".1f\")));\n\n    // Create a group for each emotion line\n    const emotionLines = svg.selectAll(\".emotion-line\").data(emotions).enter().append(\"g\").attr(\"class\", \"emotion-line\");\n\n    // Draw the lines\n    emotionLines.append(\"path\").datum(data).attr(\"fill\", \"none\").attr(\"stroke\", emotion => emotionColors[emotion]).attr(\"stroke-width\", 2).attr(\"d\", d => {\n      const line = d3.line().x((_, i) => x(i + 1)).y(datum => y(+datum[emotion])).curve(d3.curveBasis);\n      return line(data);\n    });\n\n    // Add legend\n    const legend = svg.append(\"g\").attr(\"class\", \"legend\").attr(\"transform\", `translate(${width - 150}, 20)`); // Position the legend\n\n    const legendItems = legend.selectAll(\".legend-item\").data(emotions).enter().append(\"g\").attr(\"class\", \"legend-item\").attr(\"transform\", (d, i) => `translate(0, ${i * 20})`).style(\"cursor\", \"pointer\").on(\"click\", (event, emotion) => {\n      // Toggle visibility of the corresponding emotion line\n      const line = emotionLines.filter(d => d === emotion);\n      const isVisible = line.style(\"display\") !== \"none\";\n      line.style(\"display\", isVisible ? \"none\" : \"block\");\n    });\n\n    // Add colored squares to the legend\n    legendItems.append(\"rect\").attr(\"width\", 18).attr(\"height\", 18).attr(\"fill\", emotion => emotionColors[emotion]);\n\n    // Add emotion labels to the legend\n    legendItems.append(\"text\").attr(\"x\", 24).attr(\"y\", 9).attr(\"dy\", \"0.35em\").text(emotion => emotion);\n  };\n\n  // ✅ Toggle Emotion Visibility in Steam Graph\n  const toggleEmotion = emotion => {\n    const newSelection = new Set(selectedEmotions);\n    if (newSelection.has(emotion)) {\n      newSelection.delete(emotion);\n    } else {\n      newSelection.add(emotion);\n    }\n    setSelectedEmotions(newSelection);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"left-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: inputText,\n          onChange: e => setInputText(e.target.value),\n          placeholder: \"Enter text here...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleAnalyze,\n            children: \"Analyze\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => fileInputRef.current.click(),\n            children: \"Upload\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            accept: \".txt\",\n            ref: fileInputRef,\n            style: {\n              display: \"none\"\n            },\n            onChange: handleFileUpload\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sentence-list\",\n        children: data.map((d, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `sentence-list-item ${selectedSentence === d ? \"clicked\" : \"\"}`,\n          onClick: () => setSelectedSentence(d),\n          children: d.Sentence\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"right-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"graph-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"steamGraph\",\n          ref: steamGraphRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend\",\n          children: emotions.map(emotion => /*#__PURE__*/_jsxDEV(\"span\", {\n            className: `legend-item ${selectedEmotions.has(emotion) ? \"selected\" : \"\"}`,\n            onClick: () => toggleEmotion(emotion),\n            style: {\n              color: emotionColors[emotion],\n              cursor: \"pointer\",\n              marginRight: \"10px\"\n            },\n            children: [\"\\u2B24 \", emotion]\n          }, emotion, true, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"graph-section\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"chart\",\n          ref: chartRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 220,\n    columnNumber: 5\n  }, this);\n};\n_s(EmotionAnalysisVisualization, \"hV9F/YK5E+LRrnnxutMKYfXPRE0=\");\n_c = EmotionAnalysisVisualization;\nexport default EmotionAnalysisVisualization;\nvar _c;\n$RefreshReg$(_c, \"EmotionAnalysisVisualization\");","map":{"version":3,"names":["React","useState","useEffect","useRef","d3","jsxDEV","_jsxDEV","emotionColors","EmotionAnalysisVisualization","_s","data","setData","selectedSentence","setSelectedSentence","inputText","setInputText","selectedEmotions","setSelectedEmotions","Set","Object","keys","chartRef","steamGraphRef","fileInputRef","csv","then","emotions","length","filter","key","drawBarChart","drawSteamGraph","chartDiv","select","current","html","margin","top","right","bottom","left","width","node","clientWidth","height","clientHeight","svg","append","attr","style","x","scaleBand","domain","range","padding","y","scaleLinear","nice","call","axisBottom","axisLeft","ticks","tickFormat","d","emotionScores","map","emotion","score","selectAll","enter","bandwidth","text","Math","round","handleAnalyze","fetch","method","headers","body","JSON","stringify","res","ok","Error","json","results","catch","error","console","alert","handleFileUpload","e","file","target","files","formData","FormData","container","format","emotionLines","datum","line","_","i","curve","curveBasis","legend","legendItems","on","event","isVisible","toggleEmotion","newSelection","has","delete","add","className","children","value","onChange","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","click","type","accept","ref","display","Sentence","id","color","cursor","marginRight","_c","$RefreshReg$"],"sources":["C:/Users/seyit/Desktop/Emotion Analysis/frontend2/src/components/EmotionAnalysisVisualization.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport * as d3 from \"d3\";\r\n\r\nconst emotionColors = {\r\n  \"Joy\": \"#FFEB3B\",\r\n  \"Sadness\": \"#2196F3\",\r\n  \"Fear\": \"#9C27B0\",\r\n  \"Disgust\": \"#4CAF50\",\r\n  \"Anger\": \"#F44336\",\r\n  \"Surprise\": \"#FFB322\",\r\n  \"Neutral\": \"#9E9E9E\"\r\n};\r\n\r\nconst EmotionAnalysisVisualization = () => {\r\n  const [data, setData] = useState([]);\r\n  const [selectedSentence, setSelectedSentence] = useState(null);\r\n  const [inputText, setInputText] = useState(\"\");\r\n  const [selectedEmotions, setSelectedEmotions] = useState(new Set(Object.keys(emotionColors)));\r\n  const chartRef = useRef(null);\r\n  const steamGraphRef = useRef(null);\r\n  const fileInputRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    d3.csv(\"/backend/emotion_analysis.csv\").then(setData);\r\n  }, []);\r\n\r\n  const emotions = data.length > 0 ? Object.keys(data[0]).filter(key => key !== \"Sentence\") : [];\r\n\r\n  useEffect(() => {\r\n    if (selectedSentence) drawBarChart();\r\n  }, [selectedSentence]);\r\n\r\n  useEffect(() => {\r\n    if (data.length > 0) drawSteamGraph();\r\n  }, [data, selectedEmotions]);\r\n\r\n  const drawBarChart = () => {\r\n    const chartDiv = d3.select(chartRef.current);\r\n    chartDiv.html(\"\");\r\n\r\n    const margin = { top: 10, right: 30, bottom: 50, left: 50 };\r\n    const width = chartDiv.node().clientWidth - margin.left - margin.right;\r\n    const height = chartDiv.node().clientHeight - margin.top - margin.bottom;\r\n\r\n    const svg = chartDiv.append(\"svg\")\r\n      .attr(\"viewBox\", `0 0 ${width + margin.left + margin.right} ${height + margin.top + margin.bottom}`)\r\n      .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\r\n      .style(\"width\", \"100%\")\r\n      .style(\"height\", \"100%\")\r\n      .append(\"g\")\r\n      .attr(\"transform\", `translate(${margin.left},${margin.top})`);\r\n\r\n    const x = d3.scaleBand().domain(emotions).range([0, width]).padding(0.2);\r\n    const y = d3.scaleLinear().domain([0, 1]).nice().range([height, 0]);\r\n\r\n    svg.append(\"g\").attr(\"transform\", `translate(0,${height})`).call(d3.axisBottom(x));\r\n    svg.append(\"g\").call(d3.axisLeft(y).ticks(5).tickFormat(d => `${d * 100}%`));\r\n\r\n    const emotionScores = emotions.map(emotion => ({\r\n      emotion,\r\n      score: +selectedSentence[emotion] || 0\r\n    }));\r\n\r\n    svg.selectAll(\".bar\").data(emotionScores).enter()\r\n      .append(\"rect\")\r\n      .attr(\"x\", d => x(d.emotion))\r\n      .attr(\"y\", d => y(d.score))\r\n      .attr(\"width\", x.bandwidth())\r\n      .attr(\"height\", d => height - y(d.score))\r\n      .style(\"fill\", d => emotionColors[d.emotion]);\r\n\r\n    svg.selectAll(\".label\").data(emotionScores).enter()\r\n      .append(\"text\")\r\n      .attr(\"x\", d => x(d.emotion) + x.bandwidth() / 2)\r\n      .attr(\"y\", d => y(d.score) - 5)\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .style(\"font-size\", \"12px\")\r\n      .text(d => (d.score > 0 ? `${Math.round(d.score * 100)}%` : \"\"));\r\n  };\r\n  const handleAnalyze = () => {\r\n    // Send a POST request to the backend with the input text\r\n    fetch(\"/analyze\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ text: inputText }), // Send the input text as JSON\r\n    })\r\n      .then((res) => {\r\n        if (!res.ok) {\r\n          throw new Error(\"Network response was not ok\");\r\n        }\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        // Update the state with the analysis results\r\n        setData(data.results);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error analyzing text:\", error);\r\n        alert(\"Failed to analyze text. Please try again.\");\r\n      });\r\n  };\r\n\r\n  const handleFileUpload = (e) => {\r\n    const file = e.target.files[0]; // Get the uploaded file\r\n    if (!file) return; // Exit if no file is selected\r\n  \r\n    const formData = new FormData(); // Create a FormData object\r\n    formData.append(\"file\", file); // Append the file to the FormData object\r\n  \r\n    // Send a POST request to the backend with the file\r\n    fetch(\"/upload\", {\r\n      method: \"POST\",\r\n      body: formData, // Send the file as FormData\r\n    })\r\n      .then((res) => {\r\n        if (!res.ok) {\r\n          throw new Error(\"Network response was not ok\");\r\n        }\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        // Update the state with the analysis results\r\n        setData(data.results);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error uploading file:\", error);\r\n        alert(\"Failed to upload file. Please try again.\");\r\n      });\r\n  };\r\n\r\n  // ✅ Draw Steam Graph (Filtered by Selected Emotions)\r\n  const drawSteamGraph = () => {\r\n    const container = d3.select(steamGraphRef.current);\r\n    container.html(\"\");\r\n  \r\n    const margin = { top: 20, right: 30, bottom: 100, left: 50 };\r\n    const width = container.node().clientWidth - margin.left - margin.right;\r\n    const height = container.node().clientHeight - margin.top - margin.bottom;\r\n  \r\n    const svg = container.append(\"svg\")\r\n      .attr(\"viewBox\", `0 0 ${width + margin.left + margin.right} ${height + margin.top + margin.bottom}`)\r\n      .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\r\n      .style(\"width\", \"100%\")\r\n      .style(\"height\", \"100%\")\r\n      .append(\"g\")\r\n      .attr(\"transform\", `translate(${margin.left},${margin.top})`);\r\n  \r\n    const x = d3.scaleLinear().domain([1, data.length]).range([0, width]);\r\n    const y = d3.scaleLinear().domain([0, 1]).nice().range([height, 0]);\r\n  \r\n    svg.append(\"g\").attr(\"transform\", `translate(0,${height})`).call(d3.axisBottom(x));\r\n    svg.append(\"g\").call(d3.axisLeft(y).ticks(5).tickFormat(d3.format(\".1f\")));\r\n  \r\n    // Create a group for each emotion line\r\n    const emotionLines = svg.selectAll(\".emotion-line\")\r\n      .data(emotions)\r\n      .enter()\r\n      .append(\"g\")\r\n      .attr(\"class\", \"emotion-line\");\r\n  \r\n    // Draw the lines\r\n    emotionLines.append(\"path\")\r\n      .datum(data)\r\n      .attr(\"fill\", \"none\")\r\n      .attr(\"stroke\", emotion => emotionColors[emotion])\r\n      .attr(\"stroke-width\", 2)\r\n      .attr(\"d\", d => {\r\n        const line = d3.line()\r\n          .x((_, i) => x(i + 1))\r\n          .y(datum => y(+datum[emotion]))\r\n          .curve(d3.curveBasis);\r\n        return line(data);\r\n      });\r\n  \r\n    // Add legend\r\n    const legend = svg.append(\"g\")\r\n      .attr(\"class\", \"legend\")\r\n      .attr(\"transform\", `translate(${width - 150}, 20)`); // Position the legend\r\n  \r\n    const legendItems = legend.selectAll(\".legend-item\")\r\n      .data(emotions)\r\n      .enter()\r\n      .append(\"g\")\r\n      .attr(\"class\", \"legend-item\")\r\n      .attr(\"transform\", (d, i) => `translate(0, ${i * 20})`)\r\n      .style(\"cursor\", \"pointer\")\r\n      .on(\"click\", (event, emotion) => {\r\n        // Toggle visibility of the corresponding emotion line\r\n        const line = emotionLines.filter(d => d === emotion);\r\n        const isVisible = line.style(\"display\") !== \"none\";\r\n        line.style(\"display\", isVisible ? \"none\" : \"block\");\r\n      });\r\n  \r\n    // Add colored squares to the legend\r\n    legendItems.append(\"rect\")\r\n      .attr(\"width\", 18)\r\n      .attr(\"height\", 18)\r\n      .attr(\"fill\", emotion => emotionColors[emotion]);\r\n  \r\n    // Add emotion labels to the legend\r\n    legendItems.append(\"text\")\r\n      .attr(\"x\", 24)\r\n      .attr(\"y\", 9)\r\n      .attr(\"dy\", \"0.35em\")\r\n      .text(emotion => emotion);\r\n  };\r\n\r\n  // ✅ Toggle Emotion Visibility in Steam Graph\r\n  const toggleEmotion = (emotion) => {\r\n    const newSelection = new Set(selectedEmotions);\r\n    if (newSelection.has(emotion)) {\r\n      newSelection.delete(emotion);\r\n    } else {\r\n      newSelection.add(emotion);\r\n    }\r\n    setSelectedEmotions(newSelection);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"left-panel\">\r\n        <div className=\"input-section\">\r\n          <textarea \r\n            value={inputText} \r\n            onChange={e => setInputText(e.target.value)} \r\n            placeholder=\"Enter text here...\"\r\n          />\r\n          <div className=\"button-group\">\r\n            <button onClick={handleAnalyze}>Analyze</button>\r\n            <button onClick={() => fileInputRef.current.click()}>Upload</button>\r\n            <input \r\n              type=\"file\" \r\n              accept=\".txt\" \r\n              ref={fileInputRef} \r\n              style={{ display: \"none\" }} \r\n              onChange={handleFileUpload} \r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"sentence-list\">\r\n          {data.map((d, i) => (\r\n            <div key={i} className={`sentence-list-item ${selectedSentence === d ? \"clicked\" : \"\"}`} onClick={() => setSelectedSentence(d)}>\r\n              {d.Sentence}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"right-panel\">\r\n        <div className=\"graph-section\">\r\n          <div id=\"steamGraph\" ref={steamGraphRef}></div>\r\n          <div className=\"legend\">\r\n            {emotions.map(emotion => (\r\n              <span key={emotion} \r\n                className={`legend-item ${selectedEmotions.has(emotion) ? \"selected\" : \"\"}`} \r\n                onClick={() => toggleEmotion(emotion)}\r\n                style={{ color: emotionColors[emotion], cursor: \"pointer\", marginRight: \"10px\" }}>\r\n                ⬤ {emotion}\r\n              </span>\r\n            ))}\r\n          </div>\r\n        </div>\r\n        <div className=\"graph-section\">\r\n          <div id=\"chart\" ref={chartRef}></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmotionAnalysisVisualization;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}